(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{111:function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return s}));var a=n(0),i=n.n(a),o=i.a.createContext({}),p=function(e){var t=i.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},r=function(e){var t=p(e.components);return i.a.createElement(o.Provider,{value:t},e.children)};var b="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},l=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,b=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}(e,["components","mdxType","originalType","parentName"]),l=p(n),s=a,d=l[r+"."+s]||l[s]||c[s]||o;return n?i.a.createElement(d,Object.assign({},{ref:t},b,{components:n})):i.a.createElement(d,Object.assign({},{ref:t},b))}));function s(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,p=new Array(o);p[0]=l;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r[b]="string"==typeof e?e:a,p[1]=r;for(var s=2;s<o;s++)p[s]=n[s];return i.a.createElement.apply(null,p)}return i.a.createElement.apply(null,n)}l.displayName="MDXCreateElement"},63:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return p})),n.d(t,"rightToc",(function(){return r})),n.d(t,"default",(function(){return l}));n(0);var a=n(111);function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p={id:"buttonprops",title:"ButtonProps",sidebar_label:"ButtonProps"},r=[{value:"Example",id:"example",children:[]},{value:"Hierarchy",id:"hierarchy",children:[]},{value:"Index",id:"index",children:[{value:"Properties",id:"properties",children:[]}]},{value:"Properties",id:"properties-1",children:[{value:"Optional cursor",id:"optional-cursor",children:[]},{value:"Optional enabled",id:"optional-enabled",children:[]},{value:"Optional flat",id:"optional-flat",children:[]},{value:"Optional geometry",id:"optional-geometry",children:[]},{value:"Optional icon",id:"optional-icon",children:[]},{value:"Optional id",id:"optional-id",children:[]},{value:"Optional maxSize",id:"optional-maxsize",children:[]},{value:"Optional minSize",id:"optional-minsize",children:[]},{value:"Optional mouseTracking",id:"optional-mousetracking",children:[]},{value:"Optional on",id:"optional-on",children:[]},{value:"Optional pos",id:"optional-pos",children:[]},{value:"Optional ref",id:"optional-ref",children:[]},{value:"Optional size",id:"optional-size",children:[]},{value:"Optional style",id:"optional-style",children:[]},{value:"Optional styleSheet",id:"optional-stylesheet",children:[]},{value:"Optional text",id:"optional-text",children:[]},{value:"Optional visible",id:"optional-visible",children:[]},{value:"Optional windowIcon",id:"optional-windowicon",children:[]},{value:"Optional windowOpacity",id:"optional-windowopacity",children:[]},{value:"Optional windowState",id:"optional-windowstate",children:[]},{value:"Optional windowTitle",id:"optional-windowtitle",children:[]}]}],b={rightToc:r},c="wrapper";function l(e){var t=e.components,n=o(e,["components"]);return Object(a.b)(c,i({},b,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The Button component provides ability to add and manipulate native button widgets. It is based on\n",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/QPushButton"}),"NodeGui's QPushButton"),"."),Object(a.b)("h2",{id:"example"},"Example"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript"}),'import React from "react";\nimport { Renderer, Button, Window } from "@nodegui/react-nodegui";\nconst App = () => {\n  return (\n    <Window>\n      <Button style={buttonStyle} text={"Hello World"} />\n    </Window>\n  );\n};\nconst buttonStyle = `\n  color: white;\n`;\nRenderer.render(<App />);\n\n')),Object(a.b)("h2",{id:"hierarchy"},"Hierarchy"),Object(a.b)("p",null,"  ↳ ",Object(a.b)("a",i({parentName:"p"},{href:"/docs/api/interfaces/viewprops"}),"ViewProps")),Object(a.b)("p",null,"  ↳ ",Object(a.b)("strong",{parentName:"p"},"ButtonProps")),Object(a.b)("h2",{id:"index"},"Index"),Object(a.b)("h3",{id:"properties"},"Properties"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"/docs/api/interfaces/buttonprops#optional-cursor"}),"cursor")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"/docs/api/interfaces/buttonprops#optional-enabled"}),"enabled")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"/docs/api/interfaces/buttonprops#optional-flat"}),"flat")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"/docs/api/interfaces/buttonprops#optional-geometry"}),"geometry")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"/docs/api/interfaces/buttonprops#optional-icon"}),"icon")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"/docs/api/interfaces/buttonprops#optional-id"}),"id")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"/docs/api/interfaces/buttonprops#optional-maxsize"}),"maxSize")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"/docs/api/interfaces/buttonprops#optional-minsize"}),"minSize")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"/docs/api/interfaces/buttonprops#optional-mousetracking"}),"mouseTracking")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"/docs/api/interfaces/buttonprops#optional-on"}),"on")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"/docs/api/interfaces/buttonprops#optional-pos"}),"pos")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"/docs/api/interfaces/buttonprops#optional-ref"}),"ref")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"/docs/api/interfaces/buttonprops#optional-size"}),"size")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"/docs/api/interfaces/buttonprops#optional-style"}),"style")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"/docs/api/interfaces/buttonprops#optional-stylesheet"}),"styleSheet")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"/docs/api/interfaces/buttonprops#optional-text"}),"text")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"/docs/api/interfaces/buttonprops#optional-visible"}),"visible")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"/docs/api/interfaces/buttonprops#optional-windowicon"}),"windowIcon")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"/docs/api/interfaces/buttonprops#optional-windowopacity"}),"windowOpacity")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"/docs/api/interfaces/buttonprops#optional-windowstate"}),"windowState")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"/docs/api/interfaces/buttonprops#optional-windowtitle"}),"windowTitle"))),Object(a.b)("h2",{id:"properties-1"},"Properties"),Object(a.b)("h3",{id:"optional-cursor"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," cursor"),Object(a.b)("p",null,"• ",Object(a.b)("strong",{parentName:"p"},"cursor"),"? : ",Object(a.b)("em",{parentName:"p"},"CursorShape | QCursor")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Inherited from ",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops"}),"ViewProps"),".",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops#optional-cursor"}),"cursor"))),Object(a.b)("p",null,"Sets the window mouse cursor. ",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/NodeWidget#widgetsetcursorcursor"}),"QWidget: setCursor")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-enabled"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," enabled"),Object(a.b)("p",null,"• ",Object(a.b)("strong",{parentName:"p"},"enabled"),"? : ",Object(a.b)("em",{parentName:"p"},"undefined | false | true")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Inherited from ",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops"}),"ViewProps"),".",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops#optional-enabled"}),"enabled"))),Object(a.b)("p",null,"Sets the property that tells whether the widget is enabled. In general an enabled widget handles keyboard and mouse events; a disabled widget does not. ",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/NodeWidget#widgetsetenabledenabled"}),"QWidget: setEnabled")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-flat"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," flat"),Object(a.b)("p",null,"• ",Object(a.b)("strong",{parentName:"p"},"flat"),"? : ",Object(a.b)("em",{parentName:"p"},"undefined | false | true")),Object(a.b)("p",null,"Sets whether the button border is raised. ",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/QPushButton#buttonsetflatisflat"}),"QPushButton: setFlat")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-geometry"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," geometry"),Object(a.b)("p",null,"• ",Object(a.b)("strong",{parentName:"p"},"geometry"),"? : ",Object(a.b)("em",{parentName:"p"},"Geometry")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Inherited from ",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops"}),"ViewProps"),".",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops#optional-geometry"}),"geometry"))),Object(a.b)("p",null,"Sets the screen position as well as size of the widget. ",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/NodeWidget#widgetsetgeometryx-y-width-height"}),"QWidget: setGeometry")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-icon"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," icon"),Object(a.b)("p",null,"• ",Object(a.b)("strong",{parentName:"p"},"icon"),"? : ",Object(a.b)("em",{parentName:"p"},"QIcon")),Object(a.b)("p",null,"Sets an icon in the button. ",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/QPushButton#buttonseticonicon"}),"QPushButton: setIcon")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-id"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," id"),Object(a.b)("p",null,"• ",Object(a.b)("strong",{parentName:"p"},"id"),"? : ",Object(a.b)("em",{parentName:"p"},"undefined | string")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Inherited from ",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops"}),"ViewProps"),".",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops#optional-id"}),"id"))),Object(a.b)("p",null,"Sets the object name (id) of the widget in Qt. Object name can be analogous to id of an element in the web world. Using the objectName of the widget one can reference it in the Qt's stylesheet much like what we do with id in the web world. ",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/NodeWidget#widgetsetobjectnameobjectname"}),"QWidget: setObjectName")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-maxsize"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," maxSize"),Object(a.b)("p",null,"• ",Object(a.b)("strong",{parentName:"p"},"maxSize"),"? : ",Object(a.b)("em",{parentName:"p"},"Size")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Inherited from ",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops"}),"ViewProps"),".",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops#optional-maxsize"}),"maxSize"))),Object(a.b)("p",null,"Sets the maximum size of the widget. ",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/NodeWidget#widgetsetmaximumsizewidth-height"}),"QWidget: setMaximumSize")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-minsize"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," minSize"),Object(a.b)("p",null,"• ",Object(a.b)("strong",{parentName:"p"},"minSize"),"? : ",Object(a.b)("em",{parentName:"p"},"Size")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Inherited from ",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops"}),"ViewProps"),".",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops#optional-minsize"}),"minSize"))),Object(a.b)("p",null,"Sets the minimum size of the widget. ",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/NodeWidget#widgetsetminimumsizewidth-height"}),"QWidget: setMinimumSize")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-mousetracking"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," mouseTracking"),Object(a.b)("p",null,"• ",Object(a.b)("strong",{parentName:"p"},"mouseTracking"),"? : ",Object(a.b)("em",{parentName:"p"},"undefined | false | true")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Inherited from ",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops"}),"ViewProps"),".",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops#optional-mousetracking"}),"mouseTracking"))),Object(a.b)("p",null,"Sets the property that tells whether mouseTracking is enabled for the widget. ",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/NodeWidget#widgetsetmousetrackingismousetracked"}),"QWidget: setMouseTracking")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-on"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," on"),Object(a.b)("p",null,"• ",Object(a.b)("strong",{parentName:"p"},"on"),"? : ",Object(a.b)("em",{parentName:"p"},"ListenerMap")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Inherited from ",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops"}),"ViewProps"),".",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops#optional-on"}),"on"))),Object(a.b)("p",null,"Prop to set the event listener map. See ",Object(a.b)("a",i({parentName:"p"},{href:"/docs/guides/handle-events"}),"Handlong Events")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-pos"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," pos"),Object(a.b)("p",null,"• ",Object(a.b)("strong",{parentName:"p"},"pos"),"? : ",Object(a.b)("em",{parentName:"p"},"Position")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Inherited from ",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops"}),"ViewProps"),".",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops#optional-pos"}),"pos"))),Object(a.b)("p",null,"Sets the screen position of the widget. ",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/NodeWidget#widgetmovex-y"}),"QWidget: move")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-ref"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," ref"),Object(a.b)("p",null,"• ",Object(a.b)("strong",{parentName:"p"},"ref"),"? : ",Object(a.b)("em",{parentName:"p"},"any")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Inherited from ",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops"}),"ViewProps"),".",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops#optional-ref"}),"ref"))),Object(a.b)("p",null,"Prop to set the ref. The ref will return the underlying nodegui widget."),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-size"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," size"),Object(a.b)("p",null,"• ",Object(a.b)("strong",{parentName:"p"},"size"),"? : ",Object(a.b)("em",{parentName:"p"},"ViewSize")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Inherited from ",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops"}),"ViewProps"),".",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops#optional-size"}),"size"))),Object(a.b)("p",null,"Sets both the minimum and maximum sizes of the widget. ",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/NodeWidget#widgetsetfixedsizewidth-height"}),"QWidget: setFixedSize")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-style"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," style"),Object(a.b)("p",null,"• ",Object(a.b)("strong",{parentName:"p"},"style"),"? : ",Object(a.b)("em",{parentName:"p"},"undefined | string")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Inherited from ",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops"}),"ViewProps"),".",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops#optional-style"}),"style"))),Object(a.b)("p",null,"Sets the inline stylesheet property. ",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/NodeWidget#widgetsetinlinestylestyle"}),"QWidget: setInlineStyle")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-stylesheet"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," styleSheet"),Object(a.b)("p",null,"• ",Object(a.b)("strong",{parentName:"p"},"styleSheet"),"? : ",Object(a.b)("em",{parentName:"p"},"undefined | string")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Inherited from ",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops"}),"ViewProps"),".",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops#optional-stylesheet"}),"styleSheet"))),Object(a.b)("p",null,"Sets the property that holds the widget's style sheet. ",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/NodeWidget#widgetsetstylesheetstylesheet"}),"QWidget: setStyleSheet")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-text"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," text"),Object(a.b)("p",null,"• ",Object(a.b)("strong",{parentName:"p"},"text"),"? : ",Object(a.b)("em",{parentName:"p"},"undefined | string")),Object(a.b)("p",null,"Sets the given text to the button. ",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/QPushButton#buttonsettexttext"}),"QPushButton: setText")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-visible"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," visible"),Object(a.b)("p",null,"• ",Object(a.b)("strong",{parentName:"p"},"visible"),"? : ",Object(a.b)("em",{parentName:"p"},"undefined | false | true")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Inherited from ",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops"}),"ViewProps"),".",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops#optional-visible"}),"visible"))),Object(a.b)("p",null,"Shows or hides the widget and its children. ",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/NodeWidget#widgetshow"}),"QWidget: show")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-windowicon"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," windowIcon"),Object(a.b)("p",null,"• ",Object(a.b)("strong",{parentName:"p"},"windowIcon"),"? : ",Object(a.b)("em",{parentName:"p"},"QIcon")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Inherited from ",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops"}),"ViewProps"),".",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops#optional-windowicon"}),"windowIcon"))),Object(a.b)("p",null,"Sets the window icon. ",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/NodeWidget#widgetsetwindowiconicon"}),"QWidget: setWindowIcon")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-windowopacity"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," windowOpacity"),Object(a.b)("p",null,"• ",Object(a.b)("strong",{parentName:"p"},"windowOpacity"),"? : ",Object(a.b)("em",{parentName:"p"},"Number")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Inherited from ",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops"}),"ViewProps"),".",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops#optional-windowopacity"}),"windowOpacity"))),Object(a.b)("p",null,"This property holds the level of opacity for the window. ",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/NodeWidget#widgetsetwindowopacityopacity"}),"QWidget: setWindowOpacity")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-windowstate"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," windowState"),Object(a.b)("p",null,"• ",Object(a.b)("strong",{parentName:"p"},"windowState"),"? : ",Object(a.b)("em",{parentName:"p"},"WindowState")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Inherited from ",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops"}),"ViewProps"),".",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops#optional-windowstate"}),"windowState"))),Object(a.b)("p",null,"Sets the window state. ",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/NodeWidget#widgetsetwindowstatestate"}),"QWidget: setWindowState")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-windowtitle"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," windowTitle"),Object(a.b)("p",null,"• ",Object(a.b)("strong",{parentName:"p"},"windowTitle"),"? : ",Object(a.b)("em",{parentName:"p"},"undefined | string")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Inherited from ",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops"}),"ViewProps"),".",Object(a.b)("a",i({parentName:"em"},{href:"/docs/api/interfaces/viewprops#optional-windowtitle"}),"windowTitle"))),Object(a.b)("p",null,"Sets the window title property. ",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/NodeWidget#widgetsetwindowtitletitle"}),"QWidget: setWindowTitle")))}l.isMDXComponent=!0}}]);