(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{148:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return u}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),l=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=l(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),b=l(n),m=r,u=b["".concat(i,".").concat(m)]||b[m]||d[m]||a;return n?o.a.createElement(u,c(c({ref:t},s),{},{components:n})):o.a.createElement(u,c({ref:t},s))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},75:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return l}));var r=n(2),o=n(6),a=(n(0),n(148)),i={id:"systemtrayiconprops",title:"SystemTrayIconProps",sidebar_label:"SystemTrayIconProps"},c={unversionedId:"api/interfaces/systemtrayiconprops",id:"api/interfaces/systemtrayiconprops",isDocsHomePage:!1,title:"SystemTrayIconProps",description:"The SystemTrayIcon component provides the ability to add and manipulate a native system tray icon.",source:"@site/docs/api/interfaces/systemtrayiconprops.md",slug:"/api/interfaces/systemtrayiconprops",permalink:"/docs/api/interfaces/systemtrayiconprops",version:"current",sidebar_label:"SystemTrayIconProps",sidebar:"api",previous:{title:"SpinBoxProps",permalink:"/docs/api/interfaces/spinboxprops"},next:{title:"TabItemProps",permalink:"/docs/api/interfaces/tabitemprops"}},p=[{value:"Example",id:"example",children:[]},{value:"Hierarchy",id:"hierarchy",children:[]},{value:"Index",id:"index",children:[{value:"Properties",id:"properties",children:[]}]},{value:"Properties",id:"properties-1",children:[{value:"<code>Optional</code> icon",id:"optional-icon",children:[]},{value:"<code>Optional</code> id",id:"optional-id",children:[]},{value:"<code>Optional</code> on",id:"optional-on",children:[]},{value:"<code>Optional</code> tooltip",id:"optional-tooltip",children:[]},{value:"<code>Optional</code> visible",id:"optional-visible",children:[]}]}],s={rightToc:p};function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The SystemTrayIcon component provides the ability to add and manipulate a native system tray icon.\n",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/generated/classes/qsystemtrayicon"}),"NodeGui's QSystemTrayIcon"),"."),Object(a.b)("h2",{id:"example"},"Example"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),'import React from "react";\nimport { QIcon, QAction } from "@nodegui/nodegui";\nimport { Menu, Renderer, SystemTrayIcon, Window } from "@nodegui/react-nodegui";\nimport path from "path";\n\nconst icon = new QIcon(path.join(__dirname, "../extras/assets/nodegui.png"));\nconst action = new QAction();\naction.setText("Hello");\naction.addEventListener("triggered", () => {\n  console.log("hello");\n});\n\nconst App = () => {\n  return (\n    <Window>\n      <SystemTrayIcon icon={icon} tooltip="Hello World" visible>\n        <Menu actions={[action]} />\n      </SystemTrayIcon>\n    </Window>\n  );\n};\n\nRenderer.render(<App />);\n\n')),Object(a.b)("h2",{id:"hierarchy"},"Hierarchy"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"RNProps"),Object(a.b)("p",{parentName:"li"},"\u21b3 ",Object(a.b)("strong",{parentName:"p"},"SystemTrayIconProps")))),Object(a.b)("h2",{id:"index"},"Index"),Object(a.b)("h3",{id:"properties"},"Properties"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/interfaces/systemtrayiconprops#optional-icon"}),"icon")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/interfaces/systemtrayiconprops#optional-id"}),"id")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/interfaces/systemtrayiconprops#optional-on"}),"on")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/interfaces/systemtrayiconprops#optional-tooltip"}),"tooltip")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/interfaces/systemtrayiconprops#optional-visible"}),"visible"))),Object(a.b)("h2",{id:"properties-1"},"Properties"),Object(a.b)("h3",{id:"optional-icon"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," icon"),Object(a.b)("p",null,"\u2022 ",Object(a.b)("strong",{parentName:"p"},"icon"),"? : ",Object(a.b)("em",{parentName:"p"},"QIcon")),Object(a.b)("p",null,"Sets an icon for the system tray. ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/generated/classes/qsystemtrayicon#seticon"}),"QSystemTrayIcon: setIcon")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-id"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," id"),Object(a.b)("p",null,"\u2022 ",Object(a.b)("strong",{parentName:"p"},"id"),"? : ",Object(a.b)("em",{parentName:"p"},"undefined | string")),Object(a.b)("p",null,"Sets the object name (id) of the widget in Qt. Object name can be analogous to id of an element in the web world. Using the objectName of the widget one can reference it in the Qt's stylesheet much like what we do with id in the web world. ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/NodeWidget#widgetsetobjectnameobjectname"}),"QWidget: setObjectName")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-on"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," on"),Object(a.b)("p",null,"\u2022 ",Object(a.b)("strong",{parentName:"p"},"on"),"? : ",Object(a.b)("em",{parentName:"p"},"Partial\u2039",Object(a.b)("a",Object(r.a)({parentName:"em"},{href:"/docs/api/globals#widgeteventlisteners"}),"WidgetEventListeners")," | QSystemTrayIconSignals\u203a")),Object(a.b)("p",null,"Prop to set the event listener map. See ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/guides/handle-events"}),"Handlong Events")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-tooltip"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," tooltip"),Object(a.b)("p",null,"\u2022 ",Object(a.b)("strong",{parentName:"p"},"tooltip"),"? : ",Object(a.b)("em",{parentName:"p"},"undefined | string")),Object(a.b)("p",null,"Sets a tooltip for the system tray. ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/generated/classes/qsystemtrayicon#settooltip"}),"QSystemTrayIcon: setTooltip")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"optional-visible"},Object(a.b)("inlineCode",{parentName:"h3"},"Optional")," visible"),Object(a.b)("p",null,"\u2022 ",Object(a.b)("strong",{parentName:"p"},"visible"),"? : ",Object(a.b)("em",{parentName:"p"},"undefined | false | true")),Object(a.b)("p",null,"Shows or hides the widget and its children. ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/NodeWidget#widgetshow"}),"QWidget: show")))}l.isMDXComponent=!0}}]);